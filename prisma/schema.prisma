generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Truck {
  id             String         @id @default(cuid())
  title          String
  price          Int
  listingType    ListingType    @default(SALE) @map("listing_type")
  monthlyPrice   Int?           @map("monthly_price") // Monthly lease price (only applicable for LEASE listings)
  leaseTermMonths Int?          @map("lease_term_months") // Lease term in months (only applicable for LEASE listings)
  downPayment    Int?           @map("down_payment") // Down payment amount (only applicable for LEASE listings)
  year           Int
  make           String
  model          String
  trim           String
  mileage        Int
  fuelType       String
  transmission   String
  drivetrain     String
  color          String
  vin            String         @unique
  stockNumber    String         @unique
  description    String
  status         TruckStatus    @default(AVAILABLE)
  featured       Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  inquiries      Inquiry[]
  features       TruckFeature[]
  images         TruckImage[]
  truckViews     TruckView[]

  @@map("trucks")
}

model TruckImage {
  id        String  @id @default(cuid())
  truckId   String
  imageUrl  String
  isPrimary Boolean @default(false)
  sortOrder Int     @default(0)
  truck     Truck   @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("truck_images")
}

model TruckFeature {
  id          String @id @default(cuid())
  truckId     String
  featureName String
  truck       Truck  @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("truck_features")
}

model Inquiry {
  id          String        @id @default(cuid())
  truckId     String?
  name        String
  email       String
  phone       String?
  message     String
  inquiryType InquiryType   @default(GENERAL)
  status      InquiryStatus @default(NEW)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  truck       Truck?        @relation(fields: [truckId], references: [id])

  @@map("inquiries")
}

model TruckView {
  id        String   @id @default(cuid())
  truckId   String
  timestamp DateTime @default(now())
  ipHash    String?
  sessionId String?
  truck     Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade)

  @@map("truck_views")
}

model FinancingApplication {
  id             String            @id @default(cuid())
  firstName      String
  lastName       String
  email          String
  phone          String
  annualIncome   Int?
  downPayment    Int?
  financingType  String
  truckInterest  String?
  additionalInfo String?
  status         ApplicationStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@map("financing_applications")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

enum TruckStatus {
  AVAILABLE
  PENDING_SALE
  SOLD
}

enum ListingType {
  SALE
  LEASE

  @@map("listing_type")
}

enum InquiryType {
  GENERAL
  SALES
  TEST_DRIVE
  FINANCING
  SERVICE
}

enum InquiryStatus {
  NEW
  CONTACTED
  CLOSED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}
